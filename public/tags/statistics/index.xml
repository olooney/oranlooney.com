<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statistics on OranLooney.com</title>
    <link>https://www.oranlooney.com/tags/statistics/</link>
    <description>Recent content in Statistics on OranLooney.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright {year} Oran Looney</copyright>
    <lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.oranlooney.com/tags/statistics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ML From Scratch, Part 6: Principal Component Analysis</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-6-pca/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-6-pca/</guid>
      <description>In the previous article in this series we distinguished between two kinds of unsupervised learning (cluster analysis and dimensionality reduction) and discussed the former in some detail. In this installment we turn our attention to the later.
In dimensionality reduction we seek a function \(f : \mathbb{R}^n \mapsto \mathbb{R}^m\) where \(n\) is the dimension of the original data \(\mathbf{X}\) and \(m\) is less than or equal to \(n\). That is, we want to map some high dimensional space into some lower dimensional space.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 5: Gaussian Mixture Models</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-5-gmm/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-5-gmm/</guid>
      <description>Consider the following motivating dataset:
Unlabled Data
 It is apparent that these data have some kind of structure; which is to say, they certainly are not drawn from a uniform or other simple distribution. In particular, there is at least one cluster of data in the lower right which is clearly separate from the rest. The question is: is it possible for a machine learning algorithm to automatically discover and model these kinds of structures without human assistance?</description>
    </item>
    
    <item>
      <title>Adaptive Basis Functions</title>
      <link>https://www.oranlooney.com/post/adaptive-basis-functions/</link>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/adaptive-basis-functions/</guid>
      <description>Today, let me be vague. No statistics, no algorithms, no proofs. Instead, we’re going to go through a series of examples and eyeball a suggestive series of charts, which will imply a certain conclusion, without actually proving anything; but which will, I hope, provide useful intuition.
The premise is this:
 For any given problem, there exists learned featured representations which are better than any fixed/human-engineered set of features, even once the cost of the added parameters necessary to also learn the new features into account.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 4: Decision Trees</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-4-decision-tree/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-4-decision-tree/</guid>
      <description>So far in this series we’ve followed one particular thread: linear regression -&amp;gt; logistic regression -&amp;gt; neural network. This is a very natural progression of ideas, but it really represents only one possible approach. Today we’ll switch gears and look at a model with completely different pedigree: the decision tree, sometimes also referred to as Classification and Regression Trees, or simply CART models. In contrast to the earlier progression, decision trees are designed from the start to represent non-linear features and interactions.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 3: Backpropagation</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-3-backpropagation/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-3-backpropagation/</guid>
      <description>In today’s installment of Machine Learning From Scratch we’ll build on the logistic regression from last time to create a classifier which is able to automatically represent non-linear relationships and interactions between features: the neural network. In particular I want to focus on one central algorithm which allows us to apply gradient descent to deep neural networks: the backpropagation algorithm. The history of this algorithm appears to be somewhat complex (as you can hear from Yann LeCun himself in this 2018 interview) but luckily for us the algorithm in its modern form is not difficult - although it does require a solid handle on linear algebra and calculus.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 2: Logistic Regression</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-2-logistic-regression/</link>
      <pubDate>Thu, 27 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-2-logistic-regression/</guid>
      <description>In this second installment of the machine learning from scratch we switch the point of view from regression to classification: instead of estimating a number, we will be trying to guess which of 2 possible classes a given input belongs to. A modern example is looking at a photo and deciding if its a cat or a dog.
In practice, its extremely common to need to decide between \(k\) classes where \(k &amp;gt; 2\) but in this article we’ll limit ourselves to just two classes - the so-called binary classification problem - because generalizations to many classes are usually both tedious and straight-forward.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 1: Linear Regression</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-1-linear-regression/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-1-linear-regression/</guid>
      <description>To kick off this series, will start with something simple yet foundational: linear regression via ordinary least squares.
While not exciting, linear regression finds widespread use both as a standalone learning algorithm and as a building block in more advanced learning algorithms. The output layer of a deep neural network trained for regression with MSE loss, simple AR time series models, and the “local regression” part of LOWESS smoothing are all examples of linear regression being used as an ingredient in a more sophisticated model.</description>
    </item>
    
    <item>
      <title>ML From Scratch, Part 0: Introduction</title>
      <link>https://www.oranlooney.com/post/ml-from-scratch-part-0-introduction/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/ml-from-scratch-part-0-introduction/</guid>
      <description>Motivation  “As an apprentice, every new magician must prove to his own satisfaction, at least once, that there is truly great power in magic.” - The Flying Sorcerers, by David Gerrold and Larry Niven
 How do you know if you really understand something? You could just rely on the subjective experience of feeling like you understand. This sounds plausible - surely you of all people should know, right? But this runs head-first into in the Dunning-Kruger effect.</description>
    </item>
    
    <item>
      <title>Craps Variants</title>
      <link>https://www.oranlooney.com/post/craps-game-variants/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oranlooney.com/post/craps-game-variants/</guid>
      <description>Craps is a suprisingly fair game. I remember calculating the probability of winning craps for the first time in an undergraduate discrete math class: I went back through my calculations several times, certain there was a mistake somewhere. How could it be closer than $\frac{1}{36}$?
(Spoiler Warning If you haven&amp;rsquo;t calculated these odds for yourself then you may want to do so before reading further. I&amp;rsquo;m about to spoil it for you rather thoroughly in the name of exploring a more general case.</description>
    </item>
    
  </channel>
</rss>